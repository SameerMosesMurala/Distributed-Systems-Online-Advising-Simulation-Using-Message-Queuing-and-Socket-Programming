/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * Name: Sameer Moses Murala
 * Student ID: sxm6494
 * @author Sameer
 * References:
•	https://www.dreamincode.net/forums/topic/259777-a-simple-chat-program-with-clientserver-gui-optional/
•	https://www.geeksforgeeks.org/multi-threaded-chat-application-set-1/
•	https://www.geeksforgeeks.org/multi-threaded-chat-application-set-2/
*   https://www.geeksforgeeks.org/remove-element-arraylist-java/
*   https://www.geeksforgeeks.org/randomly-select-items-from-a-list-in-java/
*   https://www.geeksforgeeks.org/generating-random-numbers-in-java/
*   https://www.javatpoint.com/java-string-to-int
*   https://stackoverflow.com/questions/1795808/and-and-or-in-if-statements
*   https://stackoverflow.com/questions/24104313/how-do-i-make-a-delay-in-java
*   https://stackoverflow.com/questions/7190618/most-efficient-way-to-check-if-a-file-is-empty-in-java-on-windows 
*   https://stackoverflow.com/questions/4614227/how-to-add-a-new-line-of-text-to-an-existing-file-in-java
*   https://www.geeksforgeeks.org/java-appending-string-file/
*   https://stackoverflow.com/questions/14721397/checking-if-a-string-is-empty-or-null-in-java/14721414
*   https://stackoverflow.com/questions/6994518/how-to-delete-the-content-of-text-file-without-deleting-itself
* 
 */
import java.io.*;
import java.text.*;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
//This class is used to handle the advisor process and the GUI
public class AdvisorProcess extends javax.swing.JFrame {
private static final long serialVersionUID = 1L;
    //Client class object
    private Client client;
    //Boolean to check if client is connected
    private boolean connected;
    //boolean to keep the advisor process polling the server 
    private boolean startpolling;
    //Default portnumber and host
    private int defaultPort;
    private String defaultHost;
    // Server Object
    public Server server;
    /**
     * Creates new form AdvisorProcess
     */
    //Constructor
    public AdvisorProcess() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jInternalFrame1 = new javax.swing.JInternalFrame();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        startButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        approvedField = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jInternalFrame1.setVisible(true);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Advisor Process");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Status of Approval");

        startButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        startButton.setText("Start");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        stopButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        stopButton.setText("Stop");
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        approvedField.setColumns(20);
        approvedField.setRows(5);
        jScrollPane1.setViewportView(approvedField);

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jInternalFrame1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel4))
                    .addGroup(jInternalFrame1Layout.createSequentialGroup()
                        .addGap(116, 116, 116)
                        .addComponent(jLabel1))
                    .addGroup(jInternalFrame1Layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                                .addComponent(startButton)
                                .addGap(62, 62, 62)
                                .addComponent(stopButton)))))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startButton)
                    .addComponent(stopButton))
                .addContainerGap(162, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jInternalFrame1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jInternalFrame1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>                        
    //start button action
    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
        //advisor process username
        String username = "AdvisorProcess";
			if(username.length() == 0)
				return;
                        //Get the Server name
			String server = "LocalHost";
			if(server.length() == 0)
				return;
                        //get the port number
			String portNumber = "1500";
			if(portNumber.length() == 0)
				return;
			int port = 0;
			try {
                            //Get the port number
				port = Integer.parseInt(portNumber);
			}
			catch(Exception en) {
				return;   
			}
                        //Create a new Client
			client = new Client(server, port, username,this);
			// Start the Client
			if(!client.start()) 
				return;
                        //keep the advisor process connected
			connected = true;
                        //disable the start button
                        startButton.setEnabled(false);
                        //start the polling thread
                        new PollingThread().start();
			//Once logged in disable the login button
    }                                           
    //stop button action method
    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
        //send the logout chat message to the server 
        client.sendMessage(new ChatMessage(ChatMessage.LOGOUT, ""));
        //set the buttons
        startButton.setEnabled(true);
        approvedField.setText("");
        //stop polling the server 
         startpolling=false;
    }                                          

    /**
     * @param args the command line arguments
     */
    //method to display messages on the GUI
    void approvedSetText(String str) {
		approvedField.append(str);
	}
    //Polling thread class to poll the server for registration information
    class PollingThread extends Thread {
        //public void timerMethod()
        //Method that runs forever
            public void run() {
        {
            //run until startpolling is set to true
            startpolling=true;
            //infinite loop
            while(startpolling)
            {
                try {
                    //intger to check if file is empty
                    int filestatus=1;
                    //open existing file
                    File file = new File("C:\\Users\\Sameer\\Desktop\\sp.txt");
                    //buffered reader to read the file
                    BufferedReader br = new BufferedReader(new FileReader(file));
                    //check if file is empty
                    if (br.readLine() == null) {
                        //change the value of the integer
                        filestatus=0;
                    }
                    //if the file is empty slepp the thread for 3 seconds 
                    if(filestatus==0)
                    {
                        System.out.println("sleeping");
                    try {
                        //sleep the thread 
                        TimeUnit.SECONDS.sleep(3);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
                    }    
                    }else{
                        //send the advisor chat message to the server to get the registration information
                        System.out.println("advisorprocessmessage");
                    client.sendMessage(new ChatMessage(ChatMessage.ADVISORMESSAGE,""));
                    }
                } catch (IOException ex) {
                    Logger.getLogger(AdvisorProcess.class.getName()).log(Level.SEVERE, null, ex);
                }
                }
            
        }
        }
    }
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdvisorProcess.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdvisorProcess.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdvisorProcess.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdvisorProcess.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdvisorProcess().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JTextArea approvedField;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton startButton;
    private javax.swing.JButton stopButton;
    // End of variables declaration                   
}
